# you must set worker processes based on your CPU cores, nginx does not benefit from setting more than that
worker_processes auto; #some last versions calculate it automatically

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS.
# if you don't set FD's then OS settings will be used which is by default 2000
worker_rlimit_nofile 100000;

# only log critical errors
error_log /var/log/nginx/error.log crit;

#pid        logs/nginx.pid;

events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;
}

http {
    # cache informations about FDs, frequently accessed files
    # can boost performance, but you need to test those values
    open_file_cache max=200000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;

    # to boost I/O on HDD we can disable access logs
    access_log off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"'

    # copies data between one FD and other from within the kernel
    # faster than read() + write()
    sendfile on;

    # send headers in one piece, it is better than sending them one by one
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    reset_timedout_connection on;

    # request timed out -- default 60
    client_body_timeout 10;
    client_header_timeout 10;

    # if client stop responding, free up memory -- default 60
    send_timeout 2;

    # server will close connection after this time -- default 75
    keepalive_timeout 30;

    include       mime.types;
    default_type  application/octet-stream;

    # assets are statically gzipped by Phoenix
    #gzip on;

    upstream api {
        server 127.0.0.1:4001;
    }

    upstream web {
        server 127.0.0.1:4000;
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2 ipv6only=on;

        server_name helio.fm www.helio.fm musehackers.com www.musehackers.com;

        location / {
            proxy_redirect off;
            proxy_pass http://web;
        }
    
        ssl_certificate /usr/local/etc/letsencrypt/live/helio.fm/fullchain.pem; # managed by Certbot
        ssl_certificate_key /usr/local/etc/letsencrypt/live/helio.fm/privkey.pem; # managed by Certbot
        include /usr/local/etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /usr/local/etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name api.helio.fm;

        location / {
            proxy_redirect off;
            proxy_pass http://api;
        }
    
        ssl_certificate /usr/local/etc/letsencrypt/live/helio.fm/fullchain.pem; # managed by Certbot
        ssl_certificate_key /usr/local/etc/letsencrypt/live/helio.fm/privkey.pem; # managed by Certbot
        include /usr/local/etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /usr/local/etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }

    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name  ~^(?<subdomain>.+)\.helio\.fm$;
        root /opt/musehackers/files/$subdomain;

        location / {
            try_files $uri $uri/ =404;
        }

        ssl_certificate /usr/local/etc/letsencrypt/live/helio.fm/fullchain.pem; # managed by Certbot
        ssl_certificate_key /usr/local/etc/letsencrypt/live/helio.fm/privkey.pem; # managed by Certbot
        include /usr/local/etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot
        ssl_dhparam /usr/local/etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot
    }

    server {
        listen 80;
        listen [::]:80;
        server_name helio.fm www.helio.fm musehackers.com www.musehackers.com api.helio.fm ci.helio.fm img.helio.fm;
        return 301 https://$host$request_uri; # managed by Certbot
    }
}